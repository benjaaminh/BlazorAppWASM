@page "/weather"
@using BlazorAppWASM.Services;
@inject WeatherService WeatherService;
@inject CountryService CountryService;
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>


@if (WeatherMessage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h2>@WeatherMessage</h2>
        <img src=@WeatherIcon />
        <!--to be continued with more data-->
    </div>
    
}

@code {

    private string WeatherMessage { get; set; }
    private string WeatherIcon { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var country = "Finland"; //finland as example
        var weatherData = await WeatherService.GetWeatherAsync(country);
        var countryData = await CountryService.GetCountryAsync(country);
        if (weatherData != null && countryData!= null)
        {
            WeatherMessage = $"Current temperature in {countryData.capital[0]}: {weatherData.main.temp}°C";
            WeatherIcon = $"https://openweathermap.org/img/wn/{weatherData.weather[0].icon}@2x.png";
        }
        else
        {
            WeatherMessage = "Failed to fetch weather data.";
        }
    }
}
<!--
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}-->

@code {
  /* private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
  */
}
